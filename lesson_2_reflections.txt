What happens when you initialize a repository? Why do you need to do it?

	The command to initialize or create a repo is 'git init'. If you enter 'ls -a' in your terminal it will show you a 'hidden' file '.git' which tells you that your file is now a git file, and your repository is now ready to start tracking files that you add/delete/update.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	
	When you're ready to commit a file that you've been working on, you add it to the staging area. Files that are not ready to be committed will remain in the working directory, perhaps because you're not done updating the file, or the file doesn't logically relate to another file you want to commit.

How can you use the staging area to make sure you have one commit per logical
change?

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?