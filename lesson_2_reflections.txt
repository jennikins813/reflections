What happens when you initialize a repository? Why do you need to do it?

	The command to initialize or create a repo is 'git init'. If you enter 'ls -a' in your terminal it will show you a 'hidden' file '.git' which tells you that your file is now a git file, and your repository is now ready to start tracking files that you add/delete/update.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	
	When you're ready to commit a file that you've been working on, you add it to the staging area. Files that are not ready to be committed will remain in the working directory, perhaps because you're not done updating the file, or the file doesn't logically relate to another file you want to commit.

How can you use the staging area to make sure you have one commit per logical
change?
	
	When I add a file to the staging area I can compare the changes made to that file to the changes made in other files that are still in the working directory. We use the 'git diff' command to do this. Running this command will show me all the changes made in the file(s) in the staging area and those still in the working directory, and I can determine if I can add other changed files into the staging area so that my commit reflects all logical changes made.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	
	Create a branch for features you want to test out for your app. This way you still have the main functionality of your app in tact.
	If you're collaborating with others and are assigned different tasks for an app, each person can work on different branches for their assigned task to avoid conflicts if they were each working on the main/master branch.

How do the diagrams help you visualize the branch structure?
	
	The diagrams gave a better picture of the branch structure with the different commits made. It provided a better understanding of how the branches connect to the master, and how commits are made on each branch. Commits made on each branch are not connected to other branches, nor the master branch. The commits only exist in that specific branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	
	When we merge two branches together, git brings the commits from each branch together into one branch. The order of the commits are arranged according to its timestamp. Once the merge is complete, your app should reflect the changes made from all the branches included in the merge. Otherwise, merge conflicts occur which you'll need to resolve before moving forward.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
	
	Pros: As long as git doesn't detect a conflict in the branches to be merges, it will proceed to merge the branches accordingly. Otherwise, if git finds that the same code was updated in both branches, it will notify you that a conflict exists in the concerned branches and will not move forward with the merge until the conflicts are resolved.
	Cons: Doing merges manually is very tedious as you'll have to compare each branch and their commit to make sure there is nothing that would cause a conflict.